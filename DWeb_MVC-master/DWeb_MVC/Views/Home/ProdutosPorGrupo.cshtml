@model List<DWeb_MVC.Models.Produtos>
@{
    ViewData["Title"] = "Produtos do Grupo";
    Layout = "~/Views/Shared/_LayoutPublic.cshtml";
    var grupoNome = ViewBag.GrupoNome as string;
    var gruposComCategorias = ViewBag.GruposComCategorias as Dictionary<string, List<string>>;
}

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="@Url.Action("Index", "Home")">
            <img src="~/imagens/logo.png" alt="Gold Stirrup" height="40" />
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarGrupos">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarGrupos">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                @if (gruposComCategorias != null)
                {
                    foreach (var grupo in gruposComCategorias)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle text-capitalize" href="#" id="navbarDropdown_@grupo.Key" data-bs-toggle="dropdown">
                                @grupo.Key
                            </a>
                            <ul class="dropdown-menu">
                                @foreach (var categoria in grupo.Value)
                                {
                                    <li>
                                        <a class="dropdown-item" asp-controller="Home" asp-action="ProdutosPorCategoria" asp-route-categoria="@categoria">
                                            @categoria
                                        </a>
                                    </li>
                                }
                            </ul>
                        </li>
                    }
                }
            </ul>
            <a href="@Url.Action("Index", "Carrinho")" class="nav-link">
                <img src="~/imagens/Carrocompras.jpg" alt="Carrinho" height="30" />
            </a>
        </div>
    </div>
</nav>

<h2 class="my-4">@grupoNome</h2>

<div class="row">
    @foreach (var produto in Model)
    {
        <div class="col-md-4 mb-4">
            <div class="card h-100 produto-card"
                 data-bs-toggle="modal"
                 data-bs-target="#produtoModal"
                 data-id="@produto.Id"
                 data-nome="@produto.Nome"
                 data-marca="@produto.Marca"
                 data-preco="@produto.Preco.ToString("C")"
                 data-categoria="@string.Join(", ", produto.Categoria.Select(c => c.Nome))"
                 data-imagem="~/imagens/@(produto.Fotos.FirstOrDefault()?.NomeFicheiro ?? "noProduto.jpg")"
                 data-imagens="@string.Join(",", produto.Fotos.Select(f => f.NomeFicheiro))">
                <img src="~/imagens/@(produto.Fotos.FirstOrDefault()?.NomeFicheiro ?? "noProduto.jpg")" class="card-img-top" alt="@produto.Nome" />
                <div class="card-body">
                    <h5 class="card-title">@produto.Nome</h5>
                    <p class="card-text">@produto.Marca</p>
                    <p class="card-text"><strong>@produto.Preco.ToString("C")</strong></p>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="produtoModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="background-color: #3a250e; color: #fff;">
            <div class="modal-header">
                <h5 class="modal-title">Detalhes do Produto</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div style="position: relative;">
                    <img id="modalImagem" src="" class="img-fluid mb-3" style="max-height:300px; object-fit:contain;" />
                    <button id="prevImg" class="btn btn-sm btn-light" style="position:absolute;left:0;top:50%;transform:translateY(-50%)">⟨</button>
                    <button id="nextImg" class="btn btn-sm btn-light" style="position:absolute;right:0;top:50%;transform:translateY(-50%)">⟩</button>
                </div>
                <p><strong>Nome:</strong> <span id="modalNome"></span></p>
                <p><strong>Marca:</strong> <span id="modalMarca"></span></p>
                <p><strong>Preço:</strong> <span id="modalPreco"></span></p>
                <p><strong>Categoria:</strong> <span id="modalCategoria"></span></p>
                <p><strong>Cor:</strong> <span id="modalCor"></span></p>
                <p><strong>Tamanho:</strong> <select id="modalTamanho" class="form-select"></select></p>
            </div>
            <div class="modal-footer">
                <a id="modalAddCarrinhoBtn" class="btn btn-light">Adicionar ao Carrinho</a>
            </div>
        </div>
    </div>
</div>

<script>
    let produtoIdAtual = null;
    let imagens = [];
    let imgIndex = 0;

    document.getElementById('produtoModal').addEventListener('show.bs.modal', async (event) => {
        const card = event.relatedTarget;
        produtoIdAtual = card.getAttribute('data-id');

        document.getElementById('modalNome').textContent = card.getAttribute('data-nome');
        document.getElementById('modalMarca').textContent = card.getAttribute('data-marca');
        document.getElementById('modalPreco').textContent = card.getAttribute('data-preco');
        document.getElementById('modalCategoria').textContent = card.getAttribute('data-categoria');

        imagens = (card.getAttribute('data-imagens') || "").split(',').filter(x => x);
        imgIndex = 0;
        atualizarImagem();

        const tamanhoSelect = document.getElementById('modalTamanho');
        tamanhoSelect.innerHTML = '';

        try {
            const res = await fetch(`/Home/GetCoresTamanhos/${produtoIdAtual}`);
            if (!res.ok) throw new Error();
            const data = await res.json();

            document.getElementById('modalCor').textContent = data.cores.join(", ") || "N/A";
            data.tamanhos.forEach(tam => {
                tamanhoSelect.innerHTML += `<option value="${tam}">${tam}</option>`;
            });
        } catch {
            showAlert("Erro ao carregar o produto.");
        }
    });

    document.getElementById('prevImg').addEventListener('click', () => {
        imgIndex = (imgIndex - 1 + imagens.length) % imagens.length;
        atualizarImagem();
    });

    document.getElementById('nextImg').addEventListener('click', () => {
        imgIndex = (imgIndex + 1) % imagens.length;
        atualizarImagem();
    });

    function atualizarImagem() {
        document.getElementById('modalImagem').src = imagens.length ? `/imagens/${imagens[imgIndex]}` : "/imagens/noProduto.jpg";
    }

    document.getElementById('modalAddCarrinhoBtn').addEventListener('click', async () => {
        const tamanho = document.getElementById('modalTamanho').value;
        try {
            const res = await fetch('/Carrinho/AdicionarAoCarrinho', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ProdutoId: parseInt(produtoIdAtual),
                    Tamanho: tamanho
                })
            });
            const result = await res.json();
            if (result.sucesso) location.reload();
            else showAlert(result.mensagem || "Erro ao adicionar");
        } catch {
            showAlert("Erro ao comunicar com o servidor.");
        }
    });

    function showAlert(msg) {
        const div = document.createElement('div');
        div.className = 'alert alert-danger position-fixed top-50 start-50 translate-middle text-center';
        div.style.zIndex = '9999';
        div.style.width = '300px';
        div.innerHTML = `<p class="m-0">${msg}</p>`;
        document.body.appendChild(div);
        setTimeout(() => div.remove(), 2000);
    }
</script>
